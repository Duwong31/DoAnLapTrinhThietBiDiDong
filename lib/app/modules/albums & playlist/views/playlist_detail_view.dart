// C:\work\SoundFlow\lib\app\modules\albums & playlist\views\playlist_now_view.dart
// (ƒê·ªïi t√™n file n√†y th√†nh playlist_now_view.dart n·∫øu b·∫°n mu·ªën thay th·∫ø ho√†n to√†n file c≈©,
// ho·∫∑c gi·ªØ t√™n PlayListNow v√† c·∫≠p nh·∫≠t route t∆∞∆°ng ·ª©ng trong app_pages.dart)

import 'package:flutter/material.dart';
import 'package:get/get.dart';

// Import models, controller, style v√† widget bottom sheet
import '../../../../models/song.dart'; // <-- Import model Song ch√≠nh
import '../../../data/models/playlist.dart';
import '../controllers/playlist_page_controller.dart';
import '../../../core/styles/style.dart'; // <-- Cho Dimes (n·∫øu d√πng)
// import '../../../widgets/bottom_song_options.dart'; // ƒê·∫£m b·∫£o import ƒë√∫ng n·∫øu d√πng SongOptionsSheet

class PlayListNow extends StatefulWidget {
  const PlayListNow({Key? key}) : super(key: key);

  @override
  State<PlayListNow> createState() => _PlayListNowState();
}

class _PlayListNowState extends State<PlayListNow> {
  final scrollController = ScrollController();
  bool showTitle = false;
  // *** L·∫•y instance c·ªßa PlayListController ***
  final PlayListController _controller = Get.find<PlayListController>();
  // D·ªØ li·ªáu playlist s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ arguments
  Playlist? _playlistData;

  @override
  void initState() {
    super.initState();
    // L·∫•y arguments v√† x·ª≠ l√Ω l·ªói
    try {
      // L·∫•y d·ªØ li·ªáu Playlist ƒë∆∞·ª£c truy·ªÅn qua arguments
      _playlistData = Get.arguments as Playlist?;
      print("PlayListNow initState: Received arguments: $_playlistData");
      if (_playlistData == null) {
        throw Exception("Playlist data is null."); // N√©m l·ªói n·∫øu data null
      }

      // *** G·ªçi h√†m fetch b√†i h√°t sau khi frame ƒë·∫ßu ti√™n ƒë∆∞·ª£c build ***
      WidgetsBinding.instance.addPostFrameCallback((_) {
        if (mounted && _playlistData != null) {
          print("PlayListNow initState: Calling fetchSongsForPlaylist with: ${_playlistData!.name}");
          _controller.fetchSongsForPlaylist(_playlistData!);
        }
      });

    } catch (e) {
      print("PlayListNow initState: Error getting arguments or calling fetch: $e");
      WidgetsBinding.instance.addPostFrameCallback((_) {
        if (mounted) {
          Get.back(); // Quay l·∫°i m√†n h√¨nh tr∆∞·ªõc
          Get.snackbar(
            "Error",
            "Could not load playlist details.",
            snackPosition: SnackPosition.BOTTOM,
            backgroundColor: Colors.redAccent,
            colorText: Colors.white,
          );
        }
      });
    }

    // Listener cho scroll ƒë·ªÉ hi·ªÉn th·ªã/·∫©n title tr√™n AppBar
    scrollController.addListener(() {
      const double threshold = 200.0;
      if (scrollController.offset > threshold && !showTitle) {
        if (mounted) {
          setState(() {
            showTitle = true;
          });
        }
      } else if (scrollController.offset <= threshold && showTitle) {
        if (mounted) {
          setState(() {
            showTitle = false;
          });
        }
      }
    });
  }

  @override
  void dispose() {
    scrollController.dispose();
    _controller.songsInCurrentPlaylist.clear();
    _controller.isSongListLoading(false); // Reset tr·∫°ng th√°i loading
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final screenHeight = MediaQuery.of(context).size.height;

    if (_playlistData == null) {
      return Scaffold(
        appBar: AppBar(
          title: const Text("Error"),
          leading: IconButton(icon: const Icon(Icons.arrow_back_ios_new), onPressed: Get.back),
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          elevation: 0,
        ),
        body: const Center(child: Text("Playlist details not available.")),
      );
    }

    final playlist = _playlistData!;

    return Scaffold(
      body: CustomScrollView(
        controller: scrollController,
        slivers: [
          SliverAppBar(
            pinned: true,
            expandedHeight: 300,
            backgroundColor: Colors.white,
            elevation: 0,
            leading: IconButton(
              icon: const Icon(Icons.arrow_back_ios_new_outlined, color: Colors.black),
              onPressed: () => Get.back(),
            ),
            title: showTitle
                ? Text(
                    playlist.name, // S·ª≠ d·ª•ng t√™n playlist t·ª´ data
                    style: const TextStyle(color: Colors.black),
                  )
                : null,
            centerTitle: true,
            flexibleSpace: FlexibleSpaceBar(
              // *** S·ª≠ d·ª•ng Obx ƒë·ªÉ c·∫≠p nh·∫≠t header khi c√≥ ·∫£nh ***
              background: Obx(() => _buildHeader(
                    context,
                    playlist,
                    // L·∫•y ·∫£nh c·ªßa b√†i h√°t ƒë·∫ßu ti√™n l√†m ·∫£nh playlist n·∫øu c√≥
                    _controller.songsInCurrentPlaylist.isNotEmpty
                        ? _controller.songsInCurrentPlaylist.first.image
                        : null, // Ho·∫∑c ·∫£nh m·∫∑c ƒë·ªãnh n·∫øu mu·ªën
                  )),
              collapseMode: CollapseMode.parallax,
            ),
            // *** Th√™m n√∫t Refresh v√†o actions ***
             actions: [
               Obx(() => _controller.isSongListLoading.value
                 ? const Padding( // Hi·ªÉn th·ªã loading nh·ªè thay cho n√∫t refresh khi ƒëang t·∫£i
                     padding: EdgeInsets.only(right: 16.0),
                     child: Center(child: SizedBox(width: 20, height: 20, child: CircularProgressIndicator(strokeWidth: 2.0))))
                 : IconButton(
                     icon: const Icon(Icons.refresh, color: Colors.black),
                     tooltip: 'Refresh Songs',
                     onPressed: () => _controller.fetchSongsForPlaylist(playlist),
                   ),
               ),
             ],
          ),
          // SliverToBoxAdapter cho c√°c n√∫t action (gi·ªØ nguy√™n)
          SliverToBoxAdapter(
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      // Nh√≥m b√™n tr√°i
                      Row(
                        children: [
                          IconButton(
                            icon: Icon(Icons.download_for_offline_outlined, size: 30, color: Colors.black),
                            onPressed: () {
                            },
                          ),
                          SizedBox(width: 10),
                          IconButton(
                            icon: Icon(Icons.more_horiz_outlined, size: 30, color: Colors.black),
                            onPressed: () {
                              _controller.showPlaylistOptionsBottomSheet(context, playlist: playlist);

                            },
                          ),
                        ],
                      ),
                      // Nh√≥m b√™n ph·∫£i
                      Row(
                        children: [
                          IconButton(
                            icon: Icon(Icons.shuffle, size: 30, color: Colors.black),
                            onPressed: () {
                              // TODO: K√≠ch ho·∫°t ph√°t ng·∫´u nhi√™n
                              print("Shuffle icon pressed");
                            },
                          ),
                          SizedBox(width: 10),
                          IconButton(
                            icon: Icon(Icons.play_circle_outline, size: 60, color: Colors.black),
                            onPressed: () {
                              // TODO: Ph√°t t·∫•t c·∫£ b√†i h√°t
                              print("Play icon pressed");
                            },
                          ),
                        ],
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),


          // *** S·ª≠ d·ª•ng Obx ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i loading, l·ªói ho·∫∑c danh s√°ch b√†i h√°t ***
          Obx(() {
            // --- Tr∆∞·ªùng h·ª£p ƒëang loading ---
            if (_controller.isSongListLoading.value) {
              return const SliverFillRemaining( // S·ª≠ d·ª•ng SliverFillRemaining ƒë·ªÉ chi·∫øm kh√¥ng gian c√≤n l·∫°i
                child: Center(child: CircularProgressIndicator()),
              );
            }
            // --- Tr∆∞·ªùng h·ª£p load xong nh∆∞ng kh√¥ng c√≥ b√†i h√°t ---
            else if (_controller.songsInCurrentPlaylist.isEmpty) {
              // Ki·ªÉm tra xem playlist g·ªëc c√≥ trackIds kh√¥ng
              if (playlist.trackIds.isEmpty) {
                return const SliverFillRemaining(
                  child: Center(child: Text("This playlist is empty.")),
                );
              } else {
                // C√≥ trackIds nh∆∞ng kh√¥ng load ƒë∆∞·ª£c b√†i h√°t (l·ªói API, ID sai, ...)
                return const SliverFillRemaining(
                  child: Center(child: Text("Couldn't load songs for this playlist.")),
                );
              }
            }
            // --- Tr∆∞·ªùng h·ª£p load th√†nh c√¥ng v√† c√≥ b√†i h√°t ---
            else {
              return SliverList(
                delegate: SliverChildBuilderDelegate(
                  (context, index) {
                    if (index == 0) {
                      return Align(
                        alignment: Alignment.centerLeft,
                        child: Padding(
                          padding: const EdgeInsets.only(left: 16, bottom: 8),
                          child: SizedBox(
                            width: screenWidth * 0.2, // üëà ch·ªânh width t√πy √Ω
                            child: ElevatedButton(
                              onPressed: () {
                                _controller.addSongToPlaylist(); // G·ªçi h√†m th√™m b√†i h√°t v√†o playlist
                              },
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.black,
                                foregroundColor: Colors.white,
                                padding: const EdgeInsets.symmetric(vertical: 6, horizontal: 6),
                                elevation: 2,
                              ),
                              child: const Row(
                                mainAxisSize: MainAxisSize.min, // ƒê·ªÉ gi·ªØ m·ªçi th·ª© g·ªçn l·∫°i
                                children: [
                                  Icon(Icons.add, size: 26),
                                  SizedBox(width: 2), // ƒêi·ªÅu ch·ªânh kho·∫£ng c√°ch gi·ªØa icon v√† text
                                  Text(
                                    'Add',
                                    style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                      );
                    }
                    // L·∫•y d·ªØ li·ªáu b√†i h√°t th·∫≠t t·ª´ controller
                    final Song song = _controller.songsInCurrentPlaylist[index - 1];

                    // S·ª≠ d·ª•ng ListTile g·ªëc, nh∆∞ng v·ªõi d·ªØ li·ªáu th·∫≠t
                    return ListTile(
                      leading: ClipRRect(
                        borderRadius: BorderRadius.circular(4),
                        child: Image.network(
                          song.image, // ·∫¢nh c·ªßa b√†i h√°t
                          width: 50, height: 50, fit: BoxFit.cover,
                          // Error builder cho ·∫£nh b√†i h√°t
                          errorBuilder: (c, e, s) => Container(
                            width: 50, height: 50,
                            color: Colors.grey[200],
                            child: const Icon(Icons.music_note, color: Colors.grey),
                          ),
                          // Loading builder cho ·∫£nh b√†i h√°t
                          loadingBuilder: (context, child, loadingProgress) {
                            if (loadingProgress == null) return child;
                            return Container(
                              width: 50, height: 50,
                              color: Colors.grey[200],
                              child: Center(child: CircularProgressIndicator(strokeWidth: 2.0, value: loadingProgress.expectedTotalBytes != null ? loadingProgress.cumulativeBytesLoaded / loadingProgress.expectedTotalBytes! : null)),
                            );
                          },
                        ),
                      ),
                      title: Text(song.title, maxLines: 1, overflow: TextOverflow.ellipsis),
                      subtitle: Text(song.artist, maxLines: 1, overflow: TextOverflow.ellipsis), // Gi·∫£ s·ª≠ artist kh√¥ng null theo model Song
                      onTap: () {
                        // TODO: Implement logic ph√°t nh·∫°c khi nh·∫•n v√†o b√†i h√°t
                        print('Play song: ${song.title} (ID: ${song.id})');
                        // V√≠ d·ª•: Get.find<AudioPlayerController>().playSong(song, _controller.songsInCurrentPlaylist);
                      },
                      trailing: IconButton(
                        icon: const Icon(Icons.more_vert),
                        tooltip: 'Song options',
                        onPressed: () {
                          _controller.showSongOptionsBottomSheet(context, songData: song);
                        },
                      ),
                    );
                  },
                  childCount: _controller.songsInCurrentPlaylist.length + 1,
                ),
              );
            }
          }),
        ],
      ),
    );
  }

  // Widget _buildHeader ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ nh·∫≠n imageUrl t√πy ch·ªçn
  Widget _buildHeader(BuildContext context, Playlist playlist, String? imageUrl) {
    // L·∫•y URL ·∫£nh (t·ª´ b√†i h√°t ƒë·∫ßu ti√™n ho·∫∑c null)
    final String? displayImageUrl = imageUrl;

    return Container(
      padding: const EdgeInsets.fromLTRB(20, 20, 20, 0), // Gi·ªØ padding g·ªëc
      decoration: const BoxDecoration( // Th√™m decoration ƒë·ªÉ c√≥ th·ªÉ l√†m gradient n·∫øu mu·ªën
         color: Colors.white, // M√†u n·ªÅn g·ªëc
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.end, // CƒÉn d∆∞·ªõi c√πng cho d·ªÖ nh√¨n khi collapse
        crossAxisAlignment: CrossAxisAlignment.start, // CƒÉn gi·ªØa c√°c th√†nh ph·∫ßn con
        children: [
          Center(
          child: SizedBox(
            width: 180, // ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc n·∫øu c·∫ßn
            height: 180,
            child: ClipRRect(
              borderRadius: BorderRadius.circular(8), // Bo tr√≤n nhi·ªÅu h∆°n m·ªôt ch√∫t
              child: displayImageUrl != null && displayImageUrl.isNotEmpty
                  ? Image.network(
                      displayImageUrl,
                      fit: BoxFit.cover,
                      errorBuilder: (context, error, stackTrace) => _buildImagePlaceholder(),
                      loadingBuilder: (context, child, loadingProgress) {
                        if (loadingProgress == null) return child;
                        return Container( // Placeholder khi ƒëang loading ·∫£nh
                          color: Colors.grey[300],
                           child: Center(
                              child: CircularProgressIndicator(
                                strokeWidth: 2.0,
                                value: loadingProgress.expectedTotalBytes != null
                                    ? loadingProgress.cumulativeBytesLoaded / loadingProgress.expectedTotalBytes!
                                    : null,
                              ),
                           ),
                        );
                      },
                    )
                  : _buildImagePlaceholder(), // Hi·ªÉn th·ªã placeholder n·∫øu kh√¥ng c√≥ ·∫£nh
            ),
          ),
          ),
          const SizedBox(height: 15), // Kho·∫£ng c√°ch
          // T√™n playlist
          Text(
            playlist.name, // S·ª≠ d·ª•ng t√™n ƒë·ªông t·ª´ playlist
            style: const TextStyle(
              fontSize: 22, // TƒÉng c·ª° ch·ªØ m·ªôt ch√∫t
              fontWeight: FontWeight.bold,
              color: Colors.black87, // M√†u ch·ªØ ƒë·∫≠m h∆°n
            ),
            textAlign: TextAlign.left, // CƒÉn gi·ªØa text
            maxLines: 2,
            overflow: TextOverflow.ellipsis,
          ),
          // C√≥ th·ªÉ th√™m th√¥ng tin kh√°c n·∫øu c·∫ßn (v√≠ d·ª•: s·ªë l∆∞·ª£ng b√†i h√°t)
           Obx(() => Text(
                '${_controller.songsInCurrentPlaylist.length} songs', // Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng b√†i h√°t (c·∫≠p nh·∫≠t ƒë·ªông)
                 style: TextStyle(fontSize: 14, color: Colors.grey[600]),
                 maxLines: 1,
              ),
            ),
          const SizedBox(height: 10), // Kho·∫£ng c√°ch d∆∞·ªõi c√πng trong header
        ],
      ),
    );
  }

  // Widget con ƒë·ªÉ t·∫°o placeholder cho ·∫£nh
  Widget _buildImagePlaceholder() {
    return Container(
      width: double.infinity, // Chi·∫øm h·∫øt kh√¥ng gian cha
      height: double.infinity,
      color: Colors.grey[300], // M√†u n·ªÅn placeholder
      child: const Icon(
        Icons.music_note, // Icon nh·∫°c
        size: 80, // K√≠ch th∆∞·ªõc icon
        color: Colors.grey, // M√†u icon
      ),
    );
  }
}